/*
 * Copyright 2015-2022 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.ritense.com/repository/maven-public/" }
    }
}

plugins {
    id "idea"

    id "org.springframework.boot" version "${springVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"

    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "com.avast.gradle.docker-compose" version "0.16.9"

    id "org.openapi.generator" version "7.9.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://repo.ritense.com/repository/maven-public/" }
}

dependencies {
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.security:spring-security-web")

    implementation "com.ritense.valtimo:core:${valtimoVersion}"
    implementation "com.ritense.valtimo:plugin-valtimo:${valtimoVersion}"
    implementation "com.ritense.valtimo:temporary-resource-storage:${valtimoVersion}"
    implementation "com.ritense.valtimo:value-resolver:${valtimoVersion}"
    implementation "com.ritense.valtimo:openzaak-plugin-authentication:${valtimoVersion}"
    implementation "com.ritense.valtimo:zaken-api:${valtimoVersion}"
    implementation "com.ritense.valtimo:documenten-api:${valtimoVersion}"
    implementation "com.ritense.valtimo:zgw:${valtimoVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"

    implementation "io.github.microutils:kotlin-logging:3.0.5"

    implementation "jakarta.inject:jakarta.inject-api:2.0.1"
    implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"

    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.moshi:moshi:1.15.1")
    implementation("com.squareup.moshi:moshi-kotlin:1.15.1")

    // Testing
    testImplementation "com.ritense.valtimo:document:${valtimoVersion}"
    testImplementation "com.ritense.valtimo:local-resource:${valtimoVersion}"
    testImplementation "com.ritense.valtimo:process-document:${valtimoVersion}"
    testImplementation "com.ritense.valtimo:test-utils-common:${valtimoVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-starter-data-jpa"

    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.3.1"

    testImplementation "org.postgresql:postgresql:42.7.3"

    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
    testImplementation "com.squareup.okhttp3:okhttp:4.12.0"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
}

openApiGenerate {
    inputSpec.set("$rootDir/plugin/src/main/resources/dcsg_xential.yaml")
    generatorName.set("kotlin")
    outputDir.set("${getLayout().getBuildDirectory().get()}/generated")
    apiPackage.set("com.rotterdam.xential.api")
    invokerPackage.set("com.rotterdam.xential.invoker")
    modelPackage.set("com.rotterdam.xential.model")
}

sourceSets {
    main {
        java {
            srcDir("${buildDir}/generated/src/main")
        }
    }
}

tasks.register("integrationTesting", Test) {
    group = "verification"
    useJUnitPlatform {
        includeTags "integration"
    }
    mustRunAfter check
}

dockerCompose {
    projectName = "xential"
    isRequiredBy(integrationTesting)
    useComposeFiles.addAll("docker-compose-integration-test.yml")
}

test {
    useJUnitPlatform()
}

sourceCompatibility = 21
targetCompatibility = 21

apply plugin: "com.avast.gradle.docker-compose"

apply from: "gradle/publishing.gradle"
